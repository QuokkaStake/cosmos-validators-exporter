# Global timeout for RPC queries, in seconds. Defaults to 5.
timeout = 10
# The address the exporter will listen on .Defaults to ":9560".
listen-address = ":9560"

# Logging config
[log]
# Log level. Change it to "debug" or even trace for more verbosity and debugging. Defaults to "info".
level = "debug"
# Whether all the logs should be written in JSON instead of a pretty-printed text. Useful if you have
# logging solutions, like Elastic stack. Defaults to false.
json = false

# Per-chain config.
[[chains]]
# Chain name that will go into labels. Required.
name = "cosmos"
# LCD endpoint to query data from. Required.
lcd-endpoint = "https://api.cosmos.quokkastake.io"
# Chain's base denom. Required.
# This value is used to convert denoms (e.g. if you have a balance with denom=uatom,
# a denom in config with denom=uatom and display-denom=atom, then it will be converted).
# Also, it will be prepended as a denom to metrics like total delegations of a validator
# and total bonded.
base-denom = "uatom"
# Denoms info.
# Used when calculating metric for token price.
# This is an array of objects with following values:
# 1. coingecko-currency
# Coingecko currency, specify it if you want to also get the wallet balance
# in total in USD as a standalone metric. Optional.
# 2. denom
# The actual denom value (such as "uatom" for Cosmos Hub or "ibc/xxxxx" for IBC denoms). Required.
# 3. display-denom
# The denom that'll be returned in labels. Required.
# 4. denom-exponent
# The exponent of a coefficient you need to multiply base denom to get 1 token on Coingecko.
# Optional, defaults to 6 (so a coefficient == 1_000_000).
#
# You can calculate the actual price of something by multiplying the metric that has denoms by the
# `cosmos_validators_exporter_price` metric (by chain + denom).
denoms = [
    { denom = "uatom", display-denom = "atom", coingecko-currency = "cosmos", denom-exponent = 6 },
]
# Bech32 prefix for a wallet address (example: "cosmos" for a Cosmos wallet). If omitted,
# the self-delegation metric will not be present.
bech-wallet-prefix = "cosmos"
# List of validators to monitor.
# Address is required, consensus-address is optional but will result in omitting
# signing-infos metrics (like missed blocks counter).
# You can get your consensus-address by running "<appd> tendermint show-address" on your validator node,
# if you are not using KMS solutions.
# If you are using it to track a consumer chain validator and if you are using the assigned key,
# please make sure to use the consensus address of this chain and not the provider chain one.
validators = [
    { address = "cosmosvaloper1xqz9pemz5e5zycaa89kys5aw6m8rhgsvw4328e", consensus-address = "cosmosvalcons1rt4g447zhv6jcqwdl447y88guwm0eevnrelgzc" }
]
# Set this to true for ICS provider chains (such as Cosmos Hub).
# If true, it enabled querying provider's consumer chains, which will fail if ICS is not enabled
# (so for all chains except Cosmos Hub basically).
# Defaults to false.
is-provider = false

# List of queries to enable/disable.
# If the list is not provided, or the value for query is not specified,
# then this query will be enabled. Useful if some queries on some chains are broken or
# do not return any meaningful value (like signing info on e-Money) or are too heavy and
# the node can't handle such requests (like delegators count on Cosmos Hub).
[chains.queries]
# Query for delegators count. Isn't used on consumer chains.
delegations = true
# Query for unbonding delegations count. Isn't used on consumer chains.
unbonds = true
# Query for self-delegated amount. Isn't used on consumer chains.
self-delegation = true
# Query for all delegators count/ranking. Also used in total bonded tokens calculation and validator info.
validators = true
# Query for consumer chain's validators. Used in metric representing active validators count on chain.
consumer-validators = true
# Query for consumer chains list and info on provider. Only used on ICS provider chains.
consumer-info = true
# Query for validator unclaimed commission. Isn't used on consumer chains.
commission = true
# Query for validator unclaimed self-delegated rewards. Isn't used on consumer chains.
rewards = true
# Query for validator wallet balance
balance = true
# Query for validator's consumer assigned key. Only used for ICS.
# If disabled, then it'll be assumed that the validator is not using assigned keys.
assigned-key = true
# Query for validator signing info
signing-info = true
# Query for chain slashing params/missed blocks window
slashing-params = true
# Query for consumer's soft opt-out threshold. Is only used on consumer chains.
params = true
# Query for chain staking params/max validators count. Isn't used on consumer chains.
staking-params = true
# Query for node info (chain_id, app/cosmos-sdk/tendermint version, app name)
node-info = true

# Consumer chains config. There can be multiple consumer chains per each provider chain.
# Only specify this block for provider chains.
# Validators are not specified explicitly, instead they are taken from provider (so, there will be
# metrics per each validator on both provider and consumer chains, if they can be calculated).
[[chains.consumers]]
# Chain name that will go into labels. Required.
name = "neutron"
# LCD endpoint of a consumer chain. Required.
lcd-endpoint = "https://api.neutron.quokkastake.io"
# Consumer chain's chain-id. Required.
chain-id = "neutron-1"
# Base denom, same as in provider config.
base-denom = "untrn"
# Bech32 prefix of a wallet on this consumer chain. Required for getting validators' wallet balance.
bech-wallet-prefix = "neutron"
# Bech32 prefix of a validator on this consumer chain. Required for basically everything.
bech-validator-prefix = "neutronvaloper"
# Bech32 prefix of a consensus key on this consumer chain. Required for signing-info metrics.
bech-consensus-prefix = "neutronvalcons"
# Chain denoms. Works the same way as chain denoms on provider chain.
denoms = [
    { denom = "untrn", display-denom = "ntrn", coingecko-currency = "neutron" }
]

# There can be multiple chains.
[[chains]]
name = "emoney"
lcd-endpoint = "https://api.emoney.quokkastake.io"
base-denom = "ungm"
denoms = [
    { denom = "ungm", display-denom = "ngm", coingecko-currency = "emoney" }
]
validators = [
    { address = "emoneyvaloper1jk4n79c5gv36972ptnly3rvx5nvn3hl3hgly9g" }
]
